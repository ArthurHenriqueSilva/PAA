#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    int swaps;
    int calls;
} Counters;

// OK
void swap(int *x, int *y, Counters *counters){
    int temp = *x;
    *x = *y;
    *y = temp;

    counters->swaps++;
}
// OK
int read_number(FILE *file){
    int x;
    fscanf(file, "%d", &x);
    return x;
}
// OK
int find_median_3(int x, int y, int z){
    int min, max, median;
    min = (x < y) ? x : y;
    min = (z < min) ? z : min;
    max = (x > y) ? x : y;
    max = (z > max) ? z : max;
    median = x + y + z - min - max;
    return (median);
}

int find_median_index(int *v, int i, int j){
    int n = j - i + 1, x = v[i + n/4], y = v[i + n/2], z = v[i + 3*n/4];
    int median, index;
    median = find_median_3(x,y,z);
    if (median == x) index = i + n/4;
    else if (median == y) index = i + n /2;
    else index = i + 3*n/4;

    int mid = (i + j) / 2;
    for(int k = i; k <= j; ++k) {
        if(v[k] == median){
            if(abs(k - mid) < abs(index - mid)) index = k;
        }
    }
    return index;
 
}


// OK
void fill_vectors(FILE *file, int size, int *v1, int *v2, int *v3, int *v4, int *v5, int *v6){
    for(int i = 0; i < size; i++) {
        int value;
        fscanf(file, "%d", &value);
        v1[i] = value;
        v2[i] = value;
        v3[i] = value;
        v4[i] = value;
        v5[i] = value;
        v6[i] = value;
        
    } 
}
// OK
void print_vector(int *v, int size){
    printf("\n");
    for(int i = 0; i < size; i++) printf("%d ", v[i]);
    // printf("\n");
}


int lm(int *v, int i, int j, Counters *counters) {
    int median_index, n;
    median_index = find_median_index(v, i, j);
    swap(&v[j], &v[median_index], counters);
    return lp(v, i, j, counters);
}

void lm_qs(int *v, int i, int j, Counters *counters) {
    counters->calls++;
    if(i < j){
        int pivo = lm(v, i, j, counters);
        lm_qs(v,i, pivo-1, counters);
        lm_qs(v, pivo+1, j, counters);
    }
}








int main(int argc, char *argv[]){
    FILE *input = fopen(argv[1], "r");
    int quant_vector = read_number(input);
    for(int i = 0; i < quant_vector; i++) {
        Counters lp_counters, lm_counters, lr_counters, hp_counters;


        lr_counters.swaps = 0;
        lr_counters.calls = 0;

        int size = read_number(input);
        int v1[size], v2[size], v3[size], v4[size], v5[size], v6[size];
        int real_size = size - 1;
        fill_vectors(input, size, v1, v2, v3, v4, v5, v6);
        printf("%d: N(%d) ", i, size);

        // LM - ordena, erra a contagem
        // print_vector(v2, size);
        lm_qs(v2, 0, real_size, &lm_counters);
        print_counters("LM", lm_counters);


    }
    return 0;
}
